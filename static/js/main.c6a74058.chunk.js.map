{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","index.js"],"names":["accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","Components_Track_Track","key","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","_this2","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","ReactDOM","createRoot","document","getElementById","render","StrictMode","Components_App_App"],"mappings":"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","file":"static/js/main.c6a74058.chunk.js","sourcesContent":["const clientId = '44dc9231f74b49889aa4b9548133e79e';\r\nconst redirectUri = 'https://nicholasquisler.github.io/jamming/';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            // This clears the parameters, allowing us to grab a new access token when it expires.\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { \r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists` , \r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris })\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from \"react\";\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    \r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input \r\n                    placeholder=\"Enter A Song, Album, or Artist\" \r\n                    onChange={this.handleTermChange}\r\n                />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n{/*                 <button className=\"SearchButton\">SEARCH</button> OLD BEFORE HELPFUL COMMENT */}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    \r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n    \r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from \"react\";\r\nimport './TrackList.css';\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n               {this.props.tracks.map(track => {\r\n                    return  <Track \r\n                                track={track}\r\n                                key={track.id}\r\n                                onAdd={this.props.onAdd}\r\n                                onRemove={this.props.onRemove}\r\n                                isRemoval={this.props.isRemoval}\r\n                            />\r\n               })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from \"react\";\r\nimport './SearchResults.css';\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList \r\n                    tracks={this.props.searchResults}\r\n                    onAdd={this.props.onAdd}\r\n                    isRemoval={false}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from \"react\";\r\nimport './Playlist.css';\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n    \r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input \r\n                    defaultValue={'New Playlist'}\r\n                    onChange={this.handleNameChange}\r\n                />\r\n                <TrackList \r\n                    tracks={this.props.playlistTracks}\r\n                    onRemove={this.props.onRemove}\r\n                    isRemoval={true}\r\n                />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>\r\n                    SAVE TO SPOTIFY\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  \n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playlistTracks: tracks })\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults \n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist \n              playlistName={this.state.playlistName} \n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './Components/App/App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}